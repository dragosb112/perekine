#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');
var processArgs = require('../../common/processArgs.js');
var logger = require('../../common/logger.js');
var publicIp = require('public-ip');
var liveMode = false;
var server = null;
/**
 * Get port from environment and store in Express.
 */

var ipAddress = null;
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

if (processArgs.runMode === '-live') {
  logger.info('### WWW: SYSTEM MODE IS LIVE! ###');
  liveMode = true;
} else {
  logger.info('### WWW: SYSTEM MODE IS DEV! ###');
}


/**
 * Create HTTP server.
 */

if (!liveMode) {
  initialiseServer();
} else {
  publicIp.v4()
    .then(ip => {      
      initialiseServer(ip);
    });
}


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Initialise server function 
 */
function initialiseServer(publicIp) {
  server = http.createServer(app);
  var ip = null;
  if (publicIp) {
    ip = publicIp;
  } else {
    ip = '127.0.0.1';
  }

  /**
   * Listen on provided port, on all network interfaces.
   */
  server.listen(port, ip);
  server.on('error', onError);
  server.on('listening', onListening);
  logger.info('WWW: server started on ' + ip + ':' + port);

}